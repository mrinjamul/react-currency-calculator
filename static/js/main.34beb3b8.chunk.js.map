{"version":3,"sources":["components/Converter.jsx","App.js","serviceWorker.js","index.js"],"names":["Converter","state","result","fromCurrency","toCurrency","amount","currencies","isTrue","convertHandler","axios","get","then","response","data","rates","setState","toFixed","catch","err","console","log","message","selectHandler","event","target","name","value","handleSwap","oldcurrency","handleChange","tohandleChange","handleClear","currencyAr","key","push","sort","className","type","this","onChange","map","cur","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.34beb3b8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nimport \"./Converter.css\";\n\nclass Converter extends Component {\n  state = {\n    result: 1,\n    fromCurrency: \"USD\",\n    toCurrency: \"INR\",\n    amount: 1,\n    currencies: [],\n    isTrue: true,\n  };\n\n  componentDidMount() {\n    axios\n      .get(\"https://api.exchangerate-api.com/v4/latest/USD\")\n      .then((response) => {\n        const currencyAr = [];\n        for (const key in response.data.rates) {\n          currencyAr.push(key);\n        }\n        this.setState({ currencies: currencyAr.sort() });\n      })\n      .catch((err) => {\n        console.log(\"Opps\", err.message);\n      });\n  }\n\n  convertHandler = () => {\n    if (this.state.isTrue === true) {\n      axios\n        .get(\n          `https://api.exchangerate-api.com/v4/latest/EUR?base=${this.state.fromCurrency}`\n        )\n        .then((response) => {\n          const result =\n            this.state.amount * response.data.rates[this.state.toCurrency];\n          this.setState({ result: result.toFixed(5) });\n        })\n        .catch((err) => {\n          console.log(\"Opps\", err.message);\n        });\n    } else {\n      axios\n        .get(\n          `https://api.exchangerate-api.com/v4/latest/EUR?base=${this.state.toCurrency}`\n        )\n        .then((response) => {\n          const amount =\n            this.state.result * response.data.rates[this.state.fromCurrency];\n          this.setState({ amount: amount.toFixed(5) });\n        })\n        .catch((err) => {\n          console.log(\"Opps\", err.message);\n        });\n    }\n  };\n\n  selectHandler = (event) => {\n    if (event.target.name === \"from\") {\n      this.setState({ fromCurrency: event.target.value, isTrue: true });\n    }\n    if (event.target.name === \"to\") {\n      this.setState({ toCurrency: event.target.value, isTrue: false });\n    }\n  };\n\n  // handleSwap = () => {\n  //   let oldcurrency = this.state.fromCurrency;\n  //   this.setState({ fromCurrency: this.state.toCurrency });\n  //   this.setState({ toCurrency: oldcurrency });\n  // };\n\n  handleSwap = () => {\n    this.setState({ isTrue: true });\n    let oldcurrency = this.state.amount;\n    this.setState({ amount: this.state.result });\n    this.setState({ result: oldcurrency });\n  };\n\n  handleChange = (event) => {\n    this.setState({ amount: event.target.value });\n    this.setState({ isTrue: true });\n  };\n\n  tohandleChange = (event) => {\n    this.setState({ result: event.target.value });\n    this.setState({ isTrue: false });\n  };\n  handleClear = () => {\n    this.setState({\n      result: 1,\n      amount: 1,\n      isTrue: true,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"Converter\">\n        <h2>\n          <span>Currency </span> Converter{\" \"}\n        </h2>\n        <div className=\"Form\">\n          <input\n            name=\"amount\"\n            type=\"text\"\n            value={this.state.amount}\n            onChange={(event) => this.handleChange(event)}\n          />\n          <select\n            name=\"from\"\n            onChange={(event) => this.selectHandler(event)}\n            value={this.state.fromCurrency}\n          >\n            {this.state.currencies.map((cur) => (\n              <option key={cur}>{cur}</option>\n            ))}\n          </select>\n        </div>\n        <div className=\"Form\">\n          <input\n            name=\"result\"\n            type=\"text\"\n            value={this.state.result}\n            onChange={(event) => this.tohandleChange(event)}\n          />\n          <select\n            name=\"to\"\n            onChange={(event) => this.selectHandler(event)}\n            value={this.state.toCurrency}\n          >\n            {this.state.currencies.map((cur) => (\n              <option key={cur}>{cur}</option>\n            ))}\n          </select>\n        </div>\n        <br />\n        <div className=\"Form\">\n          <button onClick={this.handleClear}>Clear</button>\n          <span>&nbsp;</span>\n          <button onClick={this.handleSwap}>Swap</button>\n          <span>&nbsp;</span>\n          <button onClick={this.convertHandler}>Convert</button>\n        </div>\n        {/* {this.state.result && <h3>{this.state.result}</h3>} */}\n      </div>\n    );\n  }\n}\n\nexport default Converter;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Converter from \"./components/Converter\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Converter />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}